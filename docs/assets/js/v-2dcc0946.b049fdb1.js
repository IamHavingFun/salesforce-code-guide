(self.webpackChunksalesforce_code_guide=self.webpackChunksalesforce_code_guide||[]).push([[639],{625:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-2dcc0946",path:"/code-style/javascript/",title:"JavaScript Code Style Guide",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Prefer Array methods",slug:"prefer-array-methods",children:[]},{level:2,title:"Prefer arrow functions",slug:"prefer-arrow-functions",children:[]},{level:2,title:"Prefer template strings over concatenation",slug:"prefer-template-strings-over-concatenation",children:[]},{level:2,title:"Prefer const for immutable variables",slug:"prefer-const-for-immutable-variables",children:[]},{level:2,title:"Prefer explicit radix when parsing integer numbers",slug:"prefer-explicit-radix-when-parsing-integer-numbers",children:[]},{level:2,title:"Prefer async/await for asynchronous code",slug:"prefer-async-await-for-asynchronous-code",children:[]}],filePathRelative:"code-style/javascript/README.md",git:{updatedTime:1616928222e3,contributors:[{name:"Georg Wittberger",email:"georg.wittberger@gmail.com",commits:3}]}}},879:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>k});var e=a(252);const t=(0,e.uE)('<h1 id="javascript-code-style-guide"><a class="header-anchor" href="#javascript-code-style-guide">#</a> JavaScript Code Style Guide</h1><p>This document explains some code style guidelines to make JavaScript code more readable and easier to understand.</p><h2 id="prefer-array-methods"><a class="header-anchor" href="#prefer-array-methods">#</a> Prefer Array methods</h2><blockquote><p>With Array methods common collection-based operations can be solved without imperative loops.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">BAD</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bea&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> doeFirstNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> person <span class="token keyword">of</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span>lastName <span class="token operator">!==</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n  doeFirstNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">BETTER</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bea&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> doeFirstNames <span class="token operator">=</span> persons\n  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>lastName <span class="token operator">===</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><p>Solving typical collection-based problems (e.g. finding or mapping items) using imperative loops introduces additional complexity in the code because it does not only express <em>what</em> to do but also <em>how</em> it is done. This makes it harder to understand what the real purpose of the operation is.</p>',7),p=(0,e.Uk)("It is recommended to use the various methods available on "),o=(0,e.Wm)("code",null,"Array",-1),c=(0,e.Uk)(" instances which allow for a declarative implementation of common operations. See the "),l={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("MDN reference"),i=(0,e.Uk)(" for a list of the available functions."),u=(0,e.uE)('<p>There are some important things to keep in mind though:</p><ul><li>Some <code>Array</code> methods like <code>filter</code> and <code>map</code> return new instances with the resulting items. They do not change the original instance they are invoked on. Other methods like <code>sort</code> modify the instance they are invoked on.</li><li>When using <code>Array</code> methods like <code>forEach</code>, <code>filter</code> and <code>map</code> each of them will start its own iteration over the items and there is no way to break the internal iteration before all items have been visited. If it turns out to be a performance issue, e.g. when processing huge lists of items, consider using a normal <code>for-of</code> loop instead.</li></ul><h2 id="prefer-arrow-functions"><a class="header-anchor" href="#prefer-arrow-functions">#</a> Prefer arrow functions</h2><blockquote><p>Arrow functions make code more concise and help preserve the <code>this</code> context.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">BAD</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  filteredLastName <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">;</span>\n  persons <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bea&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">get</span> <span class="token function">filteredPersons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> persons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> person<span class="token punctuation">.</span>lastName <span class="token operator">===</span> component<span class="token punctuation">.</span>filteredLastName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">BETTER</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  filteredLastName <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">;</span>\n  persons <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&quot;Bea&quot;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&quot;Bean&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">get</span> <span class="token function">filteredPersons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> persons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n      person<span class="token punctuation">.</span>lastName <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filteredLastName<span class="token punctuation">;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div><p>Especially when used as a callback traditional functions suffer from the fact that <code>this</code> inside the function is not the same as in the outer closure. A very common pattern to work around this problem is to set a variable referring to <code>this</code> in the outer closure and then accessing that variable inside the callback function. Such tricks pollute the code with unnecessary complexity.</p><p>It is recommended to use arrow functions whenever possible to write more concise code and to allow access to <code>this</code> of the outer function. This is especially useful for callbacks inside object methods.</p><p>However, it is important to note that arrow functions cannot be bound to a specific <code>this</code> scope. They always preserve the scope they have been declared inside. Therefore, arrow functions are not suitable for the declaration of object methods.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> brokenObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  objectValue<span class="token operator">:</span> <span class="token string">&quot;some value&quot;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">getObjectValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>objectValue<span class="token punctuation">;</span> <span class="token comment">// This does not work as expected!</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> correctObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  objectValue<span class="token operator">:</span> <span class="token string">&quot;some value&quot;</span><span class="token punctuation">,</span>\n  <span class="token function">getObjectValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>objectValue<span class="token punctuation">;</span> <span class="token comment">// This works</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="prefer-template-strings-over-concatenation"><a class="header-anchor" href="#prefer-template-strings-over-concatenation">#</a> Prefer template strings over concatenation</h2><blockquote><p>Template strings improve the readability of strings with variable values.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">BAD</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> lastName <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">BETTER</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><p>Traditional string concatenation requires a lot of plus signs to chain the segments of literal texts and variables.</p><p>It is recommended to use template strings to compose texts containing variable values. It improves readability.</p><h2 id="prefer-const-for-immutable-variables"><a class="header-anchor" href="#prefer-const-for-immutable-variables">#</a> Prefer const for immutable variables</h2><blockquote><p>Constant declaration makes the code&#39;s behavior easier to understand.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">BAD</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> pi <span class="token operator">=</span> <span class="token number">3.1415926535897932</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> longestName<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">of</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>longestName <span class="token operator">||</span> longestName<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> name<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    longestName <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">BETTER</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.1415926535897932</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> longestName<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">of</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>longestName <span class="token operator">||</span> longestName<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> name<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    longestName <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><p>Declaring all variables using <code>let</code> or <code>var</code> makes it harder to distinguish between those intended to be assigned a value only once and the ones that may change their value multiple times during execution.</p><p>It is recommended to use the <code>const</code> keyword for the declaration of variables which are not expected to change value after their declaration. This makes it easier to understand the behavior of the code because it is explicit which variables will not change during execution. The JavaScript interpreter will also throw an error when attempting to reassign a value.</p><h2 id="prefer-explicit-radix-when-parsing-integer-numbers"><a class="header-anchor" href="#prefer-explicit-radix-when-parsing-integer-numbers">#</a> Prefer explicit radix when parsing integer numbers</h2><blockquote><p>Explicit definition of the integer radix helps avoid unexpected runtime behavior.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">BAD</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;015&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields 15</span>\n<span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0x15&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields 21</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">BETTER</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;015&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields 15</span>\n<span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0x15&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields 21</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><p>The radix used in the standard function <code>parseInt</code> does <strong>not</strong> default to <code>10</code>! If omitted the radix is determined based on the given string format. This may confuse developers who are not aware of that and can even introduce unexpected behavior if the parsed string comes from an external data source. For example, in some programming languages preceding a string with <code>0</code> indicates it is in octal number format. However, in JavaScript <code>&quot;015&quot;</code> is parsed to the number <code>15</code> by default. The radix 8 must be passed explicitly to get the result <code>13</code> which may be expected in this case.</p><p>It is recommended to define the radix in <code>parseInt</code> calls explicitly to make it clear which number format is expected in the parsed string. This avoids confusion among developers and helps prevent unexpected results when parsing data from external data sources.</p><h2 id="prefer-async-await-for-asynchronous-code"><a class="header-anchor" href="#prefer-async-await-for-asynchronous-code">#</a> Prefer async/await for asynchronous code</h2><blockquote><p>Usage of async/await produces more linear code with less callbacks.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">BAD</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">produceAsyncValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Calculate something</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&quot;some result&quot;</span><span class="token punctuation">;</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">produceAsyncValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with result</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">BETTER</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">produceAsyncValue</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Calculate something</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&quot;some result&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">produceAsyncValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Do something with result</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><p>While the <code>Promise</code> API already helpes a lot making asynchronous code more readable it still requires wrapping certain logic in callback functions to execute it once the promise is fulfilled.</p><p>It is recommended to use <code>async/await</code> to write asynchronous functions and wait for <code>Promise</code> results. This avoids callback functions and therefore gives the code a linear look and feel.</p><p>However, pay attention to avoid unnecessary <code>async</code> function declarations because every one produces a new <code>Promise</code> instance. When overused, it can lead to inefficient memory usage.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Unnecessary async function, wrapping fetch promise in another promise</span>\n<span class="token keyword">const</span> <span class="token function-variable function">fetchApiResult</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;https://api.somedomain.com/&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>In the example above the <code>async</code> keyword should be left out as long as the function itself does not need to <code>await</code> other asynchronous results.</p>',37),k={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[p,o,c,(0,e.Wm)("a",l,[r,(0,e.Wm)(a)]),i]),u],64)}}}}]);